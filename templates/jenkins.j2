# {{ ansible_managed }}

# This gets pulled by the init script
NAME=jenkins

# Location of the Jenkins war file
JENKINS_WAR="/usr/share/jenkins/jenkins.war"

# Run Jenkins an an own servlet container
RUN_STANDALONE=true

# Location of Java
JAVA="{{ jenkins_java }}"

# Set Java arguments
JAVA_ARGS="{{ jenkins_java_args }}"

# PID file of Jenkins
PIDFILE="{{ jenkins_pidfile }}"

# User and Group
JENKINS_USER="{{ jenkins_user }}"
JENKINS_GROUP="{{ jenkins_group }}"

# jenkins home location
JENKINS_HOME="{{ jenkins_home }}"

# Log location. May be a syslog facility
JENKINS_LOG="{{ jenkins_log }}"

# OS LIMITS SETUP
#   comment this out to observe /etc/security/limits.conf
#   this is on by default because http://github.com/jenkinsci/jenkins/commit/2fb288474e980d0e7ff9c4a3b768874835a3e92e
#   reported that Ubuntu's PAM configuration doesn't include pam_limits.so, and as a result the # of file
#   descriptors are forced to 1024 regardless of /etc/security/limits.conf
MAXOPENFILES="{{ jenkins_max_fd }}"

# set the umask to control permission bits of files that Jenkins creates.
#   027 makes files read-only for group and inaccessible for others, which some security sensitive users
#   might consider benefitial, especially if Jenkins runs in a box that's used for multiple purposes.
#   Beware that 027 permission would interfere with sudo scripts that run on the master (JENKINS-25065.)
#
#   Note also that the particularly sensitive part of $JENKINS_HOME (such as credentials) are always
#   written without 'others' access. So the umask values only affect job configuration, build records,
#   that sort of things.
#
#   If commented out, the value from the OS is inherited,  which is normally 022 (as of Ubuntu 12.04,
#   by default umask comes from pam_umask(8) and /etc/login.defs
UMASK="{{ jenkins_umask }}"

# HTTP Host
HTTP_HOST="{{ jenkins_http_host }}"

# HTTP Port
HTTP_PORT="{{ jenkins_http_port }}"

# Servlet context
PREFIX="{{ jenkins_prefix }}"

# Start arguments
JENKINS_ARGS="{{ jenkins_args }}"
